import axios from "axios";

const api = axios.create({
  baseURL: `${process.env.NEXT_PUBLIC_API_URL}`,
  withCredentials: true,
});

let isRefreshing = false;
let refreshSubscribers = [];

function onTokenRefreshed(newToken) {
  console.log("‚úÖ G·ªçi l·∫°i c√°c request b·ªã ch·ªù sau khi refresh:", newToken);
  refreshSubscribers.forEach((callback) => callback(newToken));
  refreshSubscribers = [];
}

function addRefreshSubscriber(callback) {
  refreshSubscribers.push(callback);
}

// Danh s√°ch c√°c endpoint kh√¥ng c·∫ßn token
const PUBLIC_ENDPOINTS = [
  '/v1/auth/login',
  '/v1/auth/register', 
  '/v1/auth/forgot-password',
  '/v1/auth/reset-password',
  '/v1/auth/verify-email',
  // Th√™m c√°c endpoint public kh√°c ·ªü ƒë√¢y
];

// H√†m ki·ªÉm tra c√≥ ph·∫£i endpoint public kh√¥ng
function isPublicEndpoint(url) {
  return PUBLIC_ENDPOINTS.some(endpoint => url.includes(endpoint));
}

// Interceptor th√™m access token v√†o request
api.interceptors.request.use(
  (config) => {
    try {
      // Ki·ªÉm tra n·∫øu l√† public endpoint th√¨ kh√¥ng th√™m token
      if (isPublicEndpoint(config.url)) {
        console.log("üîì Endpoint public, b·ªè qua token:", config.url);
        return config;
      }

      const token = localStorage.getItem("accessToken");
      if (token) {
        config.headers.Authorization = `Bearer ${token}`;
        console.log("üîê Th√™m access token v√†o request:", config.url);
      } else {
        console.warn("‚ö†Ô∏è Kh√¥ng c√≥ token cho endpoint c·∫ßn b·∫£o m·∫≠t:", config.url);
      }
    } catch (err) {
      console.warn("‚ö†Ô∏è L·ªói khi ƒë·ªçc accessToken t·ª´ localStorage:", err);
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Interceptor x·ª≠ l√Ω l·ªói 401 v√† t·ª± ƒë·ªông refresh
api.interceptors.response.use(
  (res) => res,
  async (error) => {
    const originalRequest = error.config;

    // Ki·ªÉm tra n·∫øu request b·ªã l·ªói kh√¥ng c√≥ response (network error)
    if (!error.response) {
      return Promise.reject(error);
    }

    // Ch·ªâ x·ª≠ l√Ω l·ªói 401 v√† kh√¥ng ph·∫£i public endpoint v√† kh√¥ng ph·∫£i refresh endpoint
    if (
      error.response.status === 401 &&
      !originalRequest._retry &&
      !isPublicEndpoint(originalRequest.url) &&
      !originalRequest.url?.includes('/auth/refresh')
    ) {
      console.warn("üö´ Nh·∫≠n l·ªói 401 - accessToken c√≥ th·ªÉ ƒë√£ h·∫øt h·∫°n");

      originalRequest._retry = true;

      if (isRefreshing) {
        console.log("‚è≥ ƒêang refresh - ƒë·ª£i token m·ªõi...");
        return new Promise((resolve, reject) => {
          addRefreshSubscriber((newToken) => {
            if (newToken) {
              originalRequest.headers["Authorization"] = `Bearer ${newToken}`;
              console.log("üîÅ G·ª≠i l·∫°i request v·ªõi token m·ªõi sau khi ch·ªù:", originalRequest.url);
              resolve(api(originalRequest));
            } else {
              reject(new Error("Failed to get new token"));
            }
          });
        });
      }

      isRefreshing = true;
      console.log("üîÑ B·∫Øt ƒë·∫ßu g·ªçi API refresh token...");

      try {
        // S·ª≠ d·ª•ng c√πng instance nh∆∞ng endpoint refresh
        const refreshRes = await api.post('/v1/auth/refresh', {}, { 
          timeout: 10000,
          _skipInterceptor: true // Flag ƒë·ªÉ tr√°nh v√≤ng l·∫∑p v√¥ h·∫°n
        });

        const newToken = refreshRes?.data?.body?.token;

        if (newToken) {
          console.log("‚úÖ Refresh token th√†nh c√¥ng, l∆∞u token m·ªõi");
          localStorage.setItem("accessToken", newToken);
          
          // C·∫≠p nh·∫≠t default header cho t·∫•t c·∫£ request sau n√†y
          api.defaults.headers.common["Authorization"] = `Bearer ${newToken}`;
          
          // C·∫≠p nh·∫≠t token cho original request
          originalRequest.headers["Authorization"] = `Bearer ${newToken}`;
          
          onTokenRefreshed(newToken);
          return api(originalRequest);
        } else {
          throw new Error("‚ùå Kh√¥ng t√¨m th·∫•y access token trong ph·∫£n h·ªìi refresh.");
        }
      } catch (err) {
        console.error("‚ùå Refresh token th·∫•t b·∫°i:", err);
        
        // Clear token v√† redirect
        localStorage.removeItem("accessToken");
        delete api.defaults.headers.common["Authorization"];
        
        // Notify waiting requests v·ªÅ failure
        onTokenRefreshed(null);
        
        // Redirect to login
        if (typeof window !== 'undefined') {
          window.location.href = "/register";
        }
        
        return Promise.reject(err);
      } finally {
        isRefreshing = false;
      }
    }

    return Promise.reject(error);
  }
);

// H√†m ƒë·ªÉ set token sau khi login th√†nh c√¥ng
export function setAuthToken(token) {
  if (token) {
    localStorage.setItem("accessToken", token);
    api.defaults.headers.common["Authorization"] = `Bearer ${token}`;
    console.log("‚úÖ ƒê√£ set token m·ªõi cho t·∫•t c·∫£ request:", token);
  } else {
    localStorage.removeItem("accessToken");
    delete api.defaults.headers.common["Authorization"];
    console.log("üóëÔ∏è ƒê√£ x√≥a token");
  }
}

// H√†m ƒë·ªÉ l·∫•y token hi·ªán t·∫°i
export function getAuthToken() {
  return localStorage.getItem("accessToken");
}

export default api;