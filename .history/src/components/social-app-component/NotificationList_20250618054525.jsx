import { useEffect } from 'react';
import useAppStore from '@/store/useAppStore';

function formatNotificationText(n) {
  const name = n.creator?.givenName || "Ng∆∞·ªùi d√πng";
  switch (n.action) {
    case "SENT_ADD_FRIEND_REQUEST":
      return `${name} ƒë√£ g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n üíå`;
    case "BE_FRIEND":
      return `${name} ƒë√£ tr·ªü th√†nh b·∫°n b√® üë•`;
    case "POST":
      return `${name} ƒë√£ ƒëƒÉng m·ªôt b√†i vi·∫øt m·ªõi`;
    case "SHARE":
      return `${name} ƒë√£ chia s·∫ª m·ªôt b√†i vi·∫øt m·ªõi`;
    case "LIKE_POST":
      return `${name} ƒë√£ th√≠ch b√†i vi·∫øt c·ªßa b·∫°n ‚ù§Ô∏è`;
    case "COMMENT":
      return `${name} ƒë√£ b√¨nh lu·∫≠n v·ªÅ b√†i vi·∫øt c·ªßa b·∫°n`;
    case "REPLY_COMMENT":
      return `${name} ƒë√£ tr·∫£ l·ªùi b√¨nh lu·∫≠n`;
    case "ACCEPTED_FRIEND_REQUEST":
      return `${name} ƒë√£ ch·∫•p nh·∫≠n l·ªùi m·ªùi k·∫øt b·∫°n ü§ù`;
    case "NEW_MESSAGE":
      return `${name} ƒë√£ nh·∫Øn tin cho b·∫°n üí¨`;
    default:
      return `üîî C√≥ th√¥ng b√°o m·ªõi t·ª´ ${name}`;
  }
}

export default function NotificationList() {
  const { 
    notifications, 
    isLoadingNotifications: loading, 
    error,
    ensureNotificationsLoaded,
    markNotificationAsRead 
  } = useAppStore();

  useEffect(() => {
    // T·ª± ƒë·ªông fetch notifications n·∫øu danh s√°ch r·ªóng
    ensureNotificationsLoaded();
  }, [ensureNotificationsLoaded]);

  const handleNotificationClick = (notification) => {
    // Mark as read when clicked
    if (!notification.isRead) {
      markNotificationAsRead(notification.id);
    }
    
    // Handle navigation based on notification type
    // You can add navigation logic here based on notification.action
  };

  return (
    <section className="p-4">
      <h2 className="text-xl font-semibold text-[var(--foreground)] mb-4">Th√¥ng b√°o</h2>

      {loading ? (
        <p className="text-sm text-[var(--muted-foreground)]">ƒêang t·∫£i...</p>
      ) : error ? (
        <p className="text-sm text-red-500">Kh√¥ng th·ªÉ t·∫£i th√¥ng b√°o.</p>
      ) : notifications.length === 0 ? (
        <p className="text-sm text-[var(--muted-foreground)]">Kh√¥ng c√≥ th√¥ng b√°o n√†o.</p>
      ) : (
        <ul className="space-y-3">
          {notifications.map((n, idx) => (
            <li
              key={n.id || idx}
              onClick={() => handleNotificationClick(n)}
              className={`
                bg-[var(--card)] border border-[var(--border)] p-3 rounded-xl shadow-sm
                cursor-pointer hover:bg-[var(--accent)] transition-colors
                ${!n.isRead ? 'ring-2 ring-blue-500/20 bg-blue-50/50' : ''}
              `}
            >
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <p className="text-sm text-[var(--foreground)] font-medium">
                    {formatNotificationText(n)}
                  </p>
                  <time
                    className="block text-xs text-[var(--muted-foreground)] mt-1"
                    dateTime={n.sentAt}
                  >
                    {new Date(n.sentAt).toLocaleString()}
                  </time>
                </div>
                {!n.isRead && (
                  <div className="w-2 h-2 bg-blue-500 rounded-full ml-2 mt-1 flex-shrink-0" />
                )}
              </div>
            </li>
          ))}
        </ul>
      )}
    </section>
  );
}