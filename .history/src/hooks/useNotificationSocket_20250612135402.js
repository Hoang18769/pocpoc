// src/hooks/useNotificationSocket.js
"use client";

import { useEffect, useRef } from "react";
import { createStompClient, waitForConnection } from "@/utils/socket";
import toast from "react-hot-toast";
import { getAuthToken, isTokenValid } from "@/utils/axios";

export default function useNotificationSocket(userId) {
  const clientRef = useRef(null);
  const subscriptionRef = useRef(null);

  useEffect(() => {
    if (!userId) return;

    let isActive = true;
    
    const initializeSocket = async () => {
      try {
        // Ki·ªÉm tra token tr∆∞·ªõc khi k·∫øt n·ªëi
        const token = getAuthToken();
        if (!token || !isTokenValid()) {
          console.log("‚ö†Ô∏è No valid token available for WebSocket connection");
          return;
        }

        // T·∫°o client v·ªõi callback onConnect
        const client = createStompClient(() => {
          if (!isActive) return; // Component ƒë√£ unmount
          
          console.log("üîå WebSocket connected, setting up notification subscription");
          
          // Subscribe v√†o channel notification
          try {
            subscriptionRef.current = client.subscribeToChannel(
              `/notifications/${userId}`,
              (data) => {
                console.log("üîî Notification received:", data);
                handleNotification(data);
              }
            );
          } catch (error) {
            console.error("‚ùå Error subscribing to notifications:", error);
          }
        });

        clientRef.current = client;

        // Activate client n·∫øu ch∆∞a active
        if (!client.active) {
          client.activate();
        }

        // ƒê·ª£i k·∫øt n·ªëi th√†nh c√¥ng (optional)
        try {
          await waitForConnection(client, 10000);
          console.log("‚úÖ WebSocket connection established");
        } catch (error) {
          console.warn("‚ö†Ô∏è WebSocket connection timeout:", error);
        }

      } catch (error) {
        console.error("‚ùå Error initializing WebSocket:", error);
      }
    };

    const handleNotification = (data) => {
      if (!data || !data.action) {
        console.warn("‚ö†Ô∏è Invalid notification data:", data);
        return;
      }

      const creatorName = data.creator?.givenName || "ai ƒë√≥";

      switch (data.action) {
        case "SENT_ADD_FRIEND_REQUEST":
          toast(`${creatorName} ƒë√£ g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n üíå`);
          break;
        case "ACCEPTED_FRIEND_REQUEST":
          toast(`${creatorName} ƒë√£ ch·∫•p nh·∫≠n l·ªùi m·ªùi k·∫øt b·∫°n ü§ù`);
          break;
        case "BE_FRIEND":
          toast(`${creatorName} ƒë√£ tr·ªü th√†nh b·∫°n b√® üë•`);
          break;
        case "POST_LIKED":
          toast(`${creatorName} ƒë√£ th√≠ch b√†i vi·∫øt c·ªßa b·∫°n ‚ù§Ô∏è`);
          break;
        case "NEW_MESSAGE":
          toast(`${creatorName} ƒë√£ nh·∫Øn tin cho b·∫°n üí¨`);
          break;
        default:
          toast(`üîî C√≥ th√¥ng b√°o m·ªõi t·ª´ ${creatorName}`);
          break;
      }
    };

    // Kh·ªüi t·∫°o socket connection
    initializeSocket();

    // Cleanup function
    return () => {
      isActive = false;
      
      // Unsubscribe kh·ªèi channel
      if (subscriptionRef.current) {
        try {
          subscriptionRef.current.unsubscribe();
          console.log("üì§ Unsubscribed from notifications");
        } catch (error) {
          console.warn("‚ö†Ô∏è Error unsubscribing:", error);
        }
        subscriptionRef.current = null;
      }

      console.log("‚ùå useNotificationSocket cleanup completed");
    };
  }, [userId]);

  // Return client reference n·∫øu c·∫ßn s·ª≠ d·ª•ng b√™n ngo√†i
  return clientRef.current;
}